<?php
/**
 * Plugin dependencies loader
 *
 * @package Fieldmanager_Bylines
 */

if ( ! class_exists( 'FM_Bylines_Plugin_Dependencies' ) ) {
	/**
	 * Class FM_Bylines_Plugin_Dependencies
	 */
	class FM_Bylines_Plugin_Dependencies {

		/**
		 * Basename for the plugin with the dependency
		 *
		 * @var string
		 */
		private $plugin_basename;

		/**
		 * Name for the plugin we are checking for a dependency
		 *
		 * @var string
		 */
		private $dependency_name;

		/**
		 * Install uri for the plugin. Can be a complete url if external to WordPress.org
		 *
		 * @var string
		 */
		private $dependency_uri;

		/**
		 * Holds data for all installed plugins at the time of initialization
		 *
		 * @var array
		 */
		public $installed_plugins;

		/**
		 * Holds the message generated by the last verify command
		 *
		 * @var string
		 */
		private $verify_message;

		/**
		 * Constructor
		 *
		 * @param string $plugin_name Name of dependent plugin.
		 * @param string $dependency_name Name of plugin dependency.
		 * @param string $dependency_uri Plugin dependency source.
		 */
		public function __construct( $plugin_name, $dependency_name, $dependency_uri = '' ) {
			include_once ABSPATH . 'wp-admin/includes/plugin.php';

			// Set the plugin defaults.
			$this->plugin_name     = $plugin_name;
			$this->dependency_name = $dependency_name;
			$this->dependency_uri  = $dependency_uri;

			// Get the currently installed plugins.
			$this->installed_plugins = get_plugins();
		}

		/**
		 * Determine the plugin status and display the appropriate message if necessary
		 * The return value is a boolean that can be used in the plugin activation hook to stop activation if the plugin dependency is not active
		 *
		 * @params string $name
		 * @params url $name optional
		 * @return bool
		 */
		public function verify() {
			$plugin_uri = $this->info();
			if ( false === $plugin_uri ) {
				// The plugin is not installed. Display the appropriate message and return false.
				$this->verify_message = $this->install_message();
				return false;
			} else {
				// Determine if the plugin is active.
				if ( ! is_plugin_active( $plugin_uri ) ) {
					// The plugin is not active. Display the appropriate message and return false.
					$this->verify_message = $this->activate_message();
					return false;
				} else {
					// The plugin is installed and active.
					$this->verify_message = '';
					return true;
				}
			}
		}

		/**
		 * Display the message generated by the last verify call, if any
		 *
		 * @return string
		 */
		public function message() {
			return $this->verify_message;
		}

		/**
		 * Display a message that the plugin is installed but not activated with the activation link.
		 *
		 * @return mixed
		 */
		private function activate_message() {
			$plugin_file = $this->info();
			if ( false !== $plugin_file ) {
				return sprintf(
					/* translators: 1: Pre-translated dependency message, 2: Plugin activation url, 3: Name of plugin dependency. */
					__( '<p style="font-family: sans-serif; font-size: 12px">%1$s<br>Please <a href="%2$s" target="_top">activate %3$s</a> and try again.</p>', 'fm_bylines' ),
					$this->dependency_message(),
					wp_nonce_url( self_admin_url( 'plugins.php?action=activate&plugin=' . $plugin_file ), 'activate-plugin_' . $plugin_file ),
					$this->dependency_name
				);
			}
		}

		/**
		 * Display a message that the plugin is not installed with a link to download or install.
		 *
		 * @return string
		 */
		private function install_message() {
			// Necessary for use of plugins_api.
			include_once ABSPATH . 'wp-admin/includes/plugin-install.php';

			// See if the plugin is available on WordPress.org.
			$info = plugins_api( 'plugin_information', array( 'slug' => $this->dependency_uri ) );

			$install_instructions = '';
			if ( is_wp_error( $info ) && filter_var( $this->dependency_uri, FILTER_VALIDATE_URL ) ) {
				// The plugin is not available from WordPress.org.
				$install_instructions = sprintf(
					/* translators: 1: URL of plugin dependency, 2: Name of plugin dependency. */
					__( '<br>Please <a href="%1$s" target="_blank">download and install %2$s</a> and try again.', 'fm_bylines' ),
					$this->dependency_uri,
					$this->dependency_name
				);
			} elseif ( ! is_wp_error( $info ) ) {
				// The plugin is available from WordPress.org.
				$install_instructions = sprintf(
					/* translators: 1: URL of plugin dependency, 2: Name of plugin dependency. */
					__( '<br>Please <a href="%1$s" target="_top">install %2$s</a> and try again.', 'fm_bylines' ),
					wp_nonce_url( self_admin_url( 'update.php?action=install-plugin&plugin=' . $this->slug ), 'install-plugin_' . $this->slug ),
					$this->dependency_name
				);
			}

			return sprintf(
				/* translators: 1: Pre-translated dependency message, 2: Pre-translated install instructions. */
				__( '<p style="font-family: sans-serif; font-size: 12px">%1$s%2$s</p>', 'fm_bylines' ),
				$this->dependency_message(),
				$install_instructions
			);
		}

		/**
		 * Display a general message about the dependency.
		 *
		 * @return string
		 */
		private function dependency_message() {
			return sprintf(
				/* translators: 1: Name of dependent plugin, 2: Name of plugin dependency. */
				__( '%1$s requires that %2$s is installed and active.', 'fm_bylines' ),
				$this->plugin_name,
				$this->dependency_name
			);
		}

		/**
		 * Return the array key of the installed plugin, if it exists. Otherwise, this will return false.
		 *
		 * @return mixed
		 */
		private function info() {
			foreach ( $this->installed_plugins as $plugin_url => $plugin_data ) {
				if ( $this->dependency_name === $plugin_data['Name'] ) {
					return $plugin_url;
				}
			}
			return false;
		}
	}
}
